name: p7zip-CI

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: p7zip-full build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            mode: "clang"
          - os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: install
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt install git clang llvm patchelf build-essential make cmake wget unzip
    - name: install
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install llvm git
    - name: submodule update
      run: |
        git submodule update --init
        cd Codecs/fast-lzma2/
        patch -p1 -i ../../UInt64.patch
    - name: Setting Up (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        wget https://github.com/Terraspace/UASM/files/9881874/uasm256_linux64.zip
        unzip uasm256_linux64.zip uasm
        chmod +x uasm
        sudo cp uasm /usr/local/bin/
    - name: Set up UASM (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        curl -L https://github.com/Terraspace/UASM/archive/refs/tags/v2.56.tar.gz | tar xz
        # Apple clang 12+ requires "-Wno-error=implicit-function-declaration" cf https://forum.mmm.ucar.edu/phpBB3/viewtopic.php?t=11087&p=24226
        sed -i -e 's/-ansi/-Wno-error=implicit-function-declaration/' UASM-2.56/ClangOSX64.mak
        make -C UASM-2.56 -f ClangOSX64.mak CC=clang
        sudo cp UASM-2.56/GccUnixR/uasm /usr/local/bin/
    - name: Build (Linux/Clang)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.mode == 'clang' }}
      run: |
        export CMPL=""
        export OUTDIR=c_x64
        export FLAGS=""
        export CFLAGS_ADDITIONAL=""
        ./build_linux.sh
    - name: Build (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        echo 'clang -arch arm64 -fno-stack-check "$@"' | sudo tee /usr/local/bin/arm64-apple-darwin-clang
        echo 'clang++ -arch arm64 -fno-stack-check "$@"' | sudo tee /usr/local/bin/arm64-apple-darwin-clang++
        sudo chmod 755 /usr/local/bin/arm64-apple-darwin-clang /usr/local/bin/arm64-apple-darwin-clang++
        sed -i -e 's/\&\& LZHAM_PLATFORM_PC/\&\& LZHAM_PLATFORM_PC \&\& !defined(__aarch64__)/' Codecs/lzham_codec_devel/lzhamdecomp/lzham_platform.h
        ./build_macos.sh
    - name: 7z check
      run: |
        export PROJECT_ROOT=`pwd`
        cd $PROJECT_ROOT/p7zip_test_utils/check
        bash ../../check_7z.sh $PROJECT_ROOT/bin/p7zip/7z
        bash check.sh $PROJECT_ROOT/bin/p7zip/7zz
    - name: archive (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.mode == 'clang' }}
      run: |
        mkdir -p release
        cd bin
        ./p7zip/7zz a ../release/p7zip-linux-x86_64-clang.7z ./p7zip
    - name: archive (Macos)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        mkdir -p release
        cd bin
        ./p7zip/7zz a ../release/p7zip-macos.7z ./p7zip
    - name: Release (Linux/Clang)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.mode == 'clang' }}
      uses: ncipollo/release-action@v1
      with:
        omitBody: true
        artifacts: 'release/*'
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Release (Macos)
      if: ${{ matrix.os == 'macos-latest' }}
      uses: ncipollo/release-action@v1
      with:
        omitBody: true
        artifacts: 'release/*'
        token: ${{ secrets.GITHUB_TOKEN }}
